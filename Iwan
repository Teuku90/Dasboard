const SPREADSHEET_ID = "1tDc8cP528vGetgfp7451MnNuGL-2eK_SI4v2YIHe0jU";  // Confirm ID Sheets Anda
const SHEET_NAMES = {
  RESPONDEN: "RESPONDEN",
  LIST: "LIST"
};
const COLUMNS = {
  TIMESTAMP: 1, NOMOR_BERKAS: 2, NAMA_PEMOHON: 5, PROSEDUR: 6, DESA: 7,
  KECAMATAN: 8, PIC_SURVEYOR: 10, NAMA_SURVEYOR_PILIHAN: 11, KONTAK_PEMOHON: 12,
  TANGGAL_MULAI_ADMIN1: 13, BATAS_WAKTU_SURVEYOR: 14, STATUS_SURVEYOR_ONTIME_LATE: 15,
  STATUS_ADMIN_2A: 17, TANGGAL_SELESAI_ADMIN1: 19, TANGGAL_MULAI_ADMIN2A: 18,
  PIC_MAPPING: 20, TANGGAL_SELESAI_ADMIN2A: 21, STATUS_MAPPING_ONTIME_LATE: 22,
  PIC_QC: 24, TANGGAL_MULAI_ADMIN2B: 25, TANGGAL_SELESAI_ADMIN2B: 26,
  PIC_KOORDINATOR: 27, KOMENTAR_QC_ADMIN3: 28, EMAIL_PEMOHON_ADMIN3: 29,
  TANGGAL_MULAI_ADMIN3: 30, TANGGAL_SELESAI_ADMIN3: 31,
  STATUS_ADMIN3_ONTIME_LATE: 33, PIC_ARSIP: 34,
  STATUS_FINAL: 35, TANGGAL_SELESAI_FINAL: 36, STATUS_ADMIN4_ONTIME_LATE: 38,
  KETERANGAN_DITUNDA: 40
};
const USER_CREDENTIALS = [
  { email: "AdminSP1", password: "#123", role: "Admin 1" },
  { email: "AdminSP2A", password: "#1234", role: "Admin 2A" },
  { email: "AdminSP2B", password: "#1235", role: "Admin 2B" },
  { email: "AdminSP3", password: "#1236", role: "Admin 3" },
  { email: "AdminSP4", password: "#1237", role: "Admin 4" },
  { email: "Surveyor1", password: "#1238", role: "Surveyor" }
];
const TIME_ZONE = 'Asia/Jakarta';
const scriptCache = CacheService.getScriptCache();

function getSheet(sheetName) { 
  try { 
    const ss = SpreadsheetApp.openById(SPREADSHEET_ID); 
    const sheet = ss.getSheetByName(sheetName); 
    if (!sheet) throw new Error(`Sheet ${sheetName} tidak ditemukan.`); 
    return sheet; 
  } catch (e) { 
    Logger.log(`Error getSheet: ${e.message}`); 
    throw e; 
  } 
}

function findRowByDocNumV2(sheet, docNum) { 
  try {
    if (!sheet || !docNum || typeof docNum !== 'string') throw new Error("Sheet atau nomor dokumen tidak valid.");
    const range = sheet.getRange(1, COLUMNS.NOMOR_BERKAS, sheet.getLastRow(), 1); 
    const textFinder = range.createTextFinder(docNum.trim()).matchEntireCell(true); 
    const firstOccurrence = textFinder.findNext(); 
    return firstOccurrence ? firstOccurrence.getRow() : null; 
  } catch (e) { 
    Logger.log(`Error findRowByDocNumV2: ${e.message}`); 
    throw e; 
  } 
}

function setCellValue(range, value, isDate = false) { 
  try { 
    if (isDate && value instanceof Date) {
      value = Utilities.formatDate(value, TIME_ZONE, 'dd/MM/yyyy');
    }
    range.setValue(value).setFontFamily('Arial').setFontSize(12); 
  } catch (e) { 
    Logger.log(`Error setCellValue: ${e.message}`); 
    throw e; 
  } 
}

function prepareWhatsAppData(noWa, pesan) { 
  try { 
    let phone = String(noWa || "").trim().replace(/\D/g, ""); 
    if (!/^(62|0)8[0-9]{8,12}$/.test(phone)) return { success: false, error: "Nomor WhatsApp tidak valid." };
    if (phone.startsWith("0")) phone = "62" + phone.substring(1);
    const encodedMessage = encodeURIComponent(pesan); 
    const url = `https://api.whatsapp.com/send?phone=${phone}&text=${encodedMessage}`; 
    return { success: true, url: url }; 
  } catch (e) { 
    Logger.log(`Error prepareWhatsAppData: ${e.message}`); 
    return { success: false, error: "Terjadi kesalahan internal: " + e.message }; 
  } 
}

function getSurveyorContact(surveyorName) { 
  try { 
    if (!surveyorName || typeof surveyorName !== 'string') throw new Error("Nama surveyor tidak valid.");
    const listSheet = getSheet(SHEET_NAMES.LIST); 
    const surveyorRange = listSheet.getRange("G2:G29"); 
    const contactRange = listSheet.getRange("I2:I29"); 
    const names = surveyorRange.getValues().flat(); 
    const contacts = contactRange.getValues().flat(); 
    const index = names.findIndex(name => name && name.trim().toLowerCase() === surveyorName.trim().toLowerCase()); 
    return index !== -1 ? contacts[index] : null; 
  } catch (e) { 
    Logger.log(`Error getSurveyorContact: ${e.message}`); 
    throw e; 
  } 
}

function parseDateFromForm(dateString) {
  try {
    if (!dateString || typeof dateString !== 'string') throw new Error("Tanggal tidak valid.");
    const parts = dateString.split('-');
    if (parts.length !== 3) throw new Error("Format tanggal salah.");
    const year = parseInt(parts[0], 10);
    const month = parseInt(parts[1], 10) - 1;
    const day = parseInt(parts[2], 10);
    const date = new Date(year, month, day);
    if (isNaN(date.getTime())) throw new Error("Tanggal tidak valid.");
    return date;
  } catch (e) {
    Logger.log(`Error parseDateFromForm: ${e.message}`);
    throw e;
  }
}

function clearCacheOnError() {
  try {
    scriptCache.removeAll(['initialFormOptions', 'surveyorList']);
    Logger.log("Cache cleared due to error.");
  } catch (e) {
    Logger.log(`Error clearCacheOnError: ${e.message}`);
  }
}

function doGet(e) { 
  try { 
    let pageName = e.parameter.page || 'Dashboard'; 
    const role = e.parameter.role || 'Publik'; 
    if (pageName !== 'Login' && pageName !== 'Dashboard' && role === 'Publik') { 
      pageName = 'Login'; 
    } 
    const template = HtmlService.createTemplateFromFile(pageName); 
    template.baseUrl = ScriptApp.getService().getUrl(); 
    template.userName = e.parameter.name || 'Publik'; 
    template.userRole = role; 
    if (pageName === 'Dashboard') { 
      const dashboardData = getDashboardData() || {};
      template.dashboardData = JSON.stringify(dashboardData).replace(/[-\u001F\u007F-\u009F]/g, ''); // Sanitasi JSON
      template.kecamatanStats = JSON.stringify(getKecamatanStats() || []).replace(/[-\u001F\u007F-\u009F]/g, '');
      template.formOptions = {};
    } else if (pageName === 'DashboardSurveyor') {
      template.surveyorList = getSurveyorList() || [];
      template.selectedSurveyor = e.parameter.surveyor || '';
      template.surveyorData = template.selectedSurveyor ? getSurveyorData(template.selectedSurveyor) : {};
      template.formOptions = {};
      template.dashboardData = {};
    } else if (['FormLanjutan', 'FormAdmin2A', 'FormAdmin2B', 'FormAdmin3', 'FormAdminFinalize'].includes(pageName)) { 
      template.formOptions = getInitialFormOptions() || {}; 
      template.dashboardData = {}; 
    } else { 
      template.dashboardData = {}; 
      template.formOptions = {}; 
    } 
    return template.evaluate() 
      .setTitle("Sistem Monitoring Berkas - BPN Kab. Serang") 
      .setXFrameOptionsMode(HtmlService.XFrameOptionsMode.ALLOWALL); 
  } catch (err) { 
    Logger.log(`Error doGet: ${err.message} Stack: ${err.stack}`); 
    return HtmlService.createHtmlOutput(`<h1>Error</h1><p>Halaman tidak ditemukan: ${err.message}</p>`); 
  } 
}

function checkLogin(email, password) { 
  try {
    if (!email || !password || typeof email !== 'string' || typeof password !== 'string') {
      throw new Error("Username atau password tidak valid.");
    }
    const user = USER_CREDENTIALS.find(u => u.email === email.trim() && u.password === password); 
    if (!user) throw new Error("Username atau password salah.");
    return { status: "success", role: user.role, name: email.split('@')[0] || email }; 
  } catch (e) {
    Logger.log(`Error checkLogin: ${e.message}`);
    return { status: "error", message: e.message };
  }
}

function logout() { 
  try {
    return ScriptApp.getService().getUrl() + '?page=Login';  // Revised to Login
  } catch (e) {
    Logger.log(`Error logout: ${e.message}`);
    throw e;
  }
}

function getInitialFormOptions() { 
  try {
    const cacheKey = 'initialFormOptions';
    let cachedOptions = scriptCache.get(cacheKey); 
    if (cachedOptions) return JSON.parse(cachedOptions); 
    const listSheet = getSheet(SHEET_NAMES.LIST); 
    const respondenSheet = getSheet(SHEET_NAMES.RESPONDEN); 
    if (!listSheet || !respondenSheet) throw new Error("Sheet LIST atau RESPONDEN tidak ditemukan."); 
    const lastRow = respondenSheet.getLastRow() - 1; 
    const rawDocValues = respondenSheet.getRange(2, COLUMNS.NOMOR_BERKAS, lastRow).getValues().flat(); 
    Logger.log(`Raw docValues sample: ${JSON.stringify(rawDocValues.slice(0, 5))}`);  // Log first 5 raw
    const docNumbers = rawDocValues.filter(val => val);  // Relax: filter empty only
    Logger.log(`Filtered docNumbers: ${docNumbers.length}`); 
    const surveyorList = listSheet.getRange("G2:G29").getValues().flat().filter(val => val); 
    const mappingOfficers = listSheet.getRange("L2:L6").getValues().flat().filter(val => val); 
    const statusAdmin2BList = [
      { value: "Proses", label: "Berkas sedang dalam pengecekan QC" },
      { value: "Selesai", label: "Berkas Masuk ke Admin 3" }
    ]; 
    const statusAdmin3List = listSheet.getRange("P2:P3").getValues().flat()
      .filter(val => val)
      .map(s => ({ value: s, label: s })); 
    const finalStatusList = listSheet.getRange("V2:V3").getValues().flat()
      .filter(val => val)
      .map(s => ({ value: s, label: s })); 
    const options = { docNumbers, surveyorList, mappingOfficers, admin2B: { statusList: statusAdmin2BList }, admin3: { statusList: statusAdmin3List }, adminFinal: { finalStatusList } }; 
    scriptCache.put(cacheKey, JSON.stringify(options), 7200); 
    return options; 
  } catch (e) {
    Logger.log(`Error getInitialFormOptions: ${e.message}`);
    clearCacheOnError();
    throw new Error("Gagal memuat data. Cache dibersihkan, coba lagi.");
  }
}

function getSurveyorList() {
  try {
    const cacheKey = 'surveyorList';
    let cachedList = scriptCache.get(cacheKey);
    if (cachedList) return JSON.parse(cachedList);
    const respondenSheet = getSheet(SHEET_NAMES.RESPONDEN);
    if (!respondenSheet) throw new Error("Sheet RESPONDEN tidak tersedia.");
    const list = respondenSheet.getRange(2, COLUMNS.NAMA_SURVEYOR_PILIHAN, respondenSheet.getLastRow() - 1)
      .getValues().flat()
      .filter(val => val && typeof val === 'string' && val.trim() && !/[-\u001F]/.test(val))
      .filter((v, i, a) => a.indexOf(v) === i).sort();
    if (!list.length) throw new Error("Daftar surveyor kosong.");
    scriptCache.put(cacheKey, JSON.stringify(list), 7200);
    return list;
  } catch (e) {
    Logger.log(`Error getSurveyorList: ${e.message}`);
    clearCacheOnError();
    throw e;
  }
}

function getDataByDocumentNumber(docNumber) { 
  try {
    if (!docNumber || typeof docNumber !== 'string') throw new Error("Nomor dokumen tidak valid.");
    const sheet = getSheet(SHEET_NAMES.RESPONDEN); 
    const rowNum = findRowByDocNumV2(sheet, docNumber); 
    if (!rowNum) return { surveyor: "", kontak: "", namaPemohon: "Tidak Diketahui" }; 
    const row = sheet.getRange(rowNum, 1, 1, sheet.getLastColumn()).getValues()[0]; 
    return { 
      surveyor: row[COLUMNS.NAMA_SURVEYOR_PILIHAN - 1] || "", 
      kontak: row[COLUMNS.KONTAK_PEMOHON - 1] || "", 
      namaPemohon: row[COLUMNS.NAMA_PEMOHON - 1] || "Tidak Diketahui" 
    }; 
  } catch (e) {
    Logger.log(`Error getDataByDocumentNumber: ${e.message}`);
    throw e;
  }
}

function getAdmin2ADataByDocNum(docNum) { 
  try {
    if (!docNum || typeof docNum !== 'string') throw new Error("Nomor dokumen tidak valid.");
    const sheet = getSheet(SHEET_NAMES.RESPONDEN); 
    const rowNum = findRowByDocNumV2(sheet, docNum); 
    if (!rowNum) return { isProcessed: false }; 
    const row = sheet.getRange(rowNum, 1, 1, sheet.getLastColumn()).getValues()[0]; 
    const status = row[COLUMNS.STATUS_ADMIN_2A - 1] || ""; 
    if (status === "Proses" || status === "Selesai" || status === "Ditunda") { 
      return { 
        isProcessed: true, 
        status: status, 
        tanggalMulai: row[COLUMNS.TANGGAL_MULAI_ADMIN2A - 1] ? Utilities.formatDate(new Date(row[COLUMNS.TANGGAL_MULAI_ADMIN2A - 1]), TIME_ZONE, 'yyyy-MM-dd') : "", 
        mappingOfficer: row[COLUMNS.PIC_MAPPING - 1] || "",
        keteranganDitunda: row[COLUMNS.KETERANGAN_DITUNDA - 1] || ""
      }; 
    } 
    return { isProcessed: false }; 
  } catch (e) {
    Logger.log(`Error getAdmin2ADataByDocNum: ${e.message}`);
    throw e;
  }
}

function getAdmin2B_QC_DataByDocNum(docNum) { 
  try {
    if (!docNum || typeof docNum !== 'string') throw new Error("Nomor dokumen tidak valid.");
    const sheet = getSheet(SHEET_NAMES.RESPONDEN); 
    const rowNum = findRowByDocNumV2(sheet, docNum); 
    if (!rowNum) return { found: false }; 
    const rowData = sheet.getRange(rowNum, 1, 1, sheet.getLastColumn()).getValues()[0]; 
    return { 
      found: true, 
      status: rowData[COLUMNS.PIC_QC - 1] || "", 
      tanggalMulai: rowData[COLUMNS.TANGGAL_MULAI_ADMIN2B - 1] ? Utilities.formatDate(new Date(rowData[COLUMNS.TANGGAL_MULAI_ADMIN2B - 1]), TIME_ZONE, 'yyyy-MM-dd') : "", 
      tanggalSelesai: rowData[COLUMNS.TANGGAL_SELESAI_ADMIN2B - 1] ? Utilities.formatDate(new Date(rowData[COLUMNS.TANGGAL_SELESAI_ADMIN2B - 1]), TIME_ZONE, 'yyyy-MM-dd') : "" 
    }; 
  } catch (e) {
    Logger.log(`Error getAdmin2B_QC_DataByDocNum: ${e.message}`);
    throw e;
  }
}

function getPemohonContact(docNum) { 
  try {
    if (!docNum || typeof docNum !== 'string') throw new Error("Nomor dokumen tidak valid.");
    const sheet = getSheet(SHEET_NAMES.RESPONDEN); 
    const rowNum = findRowByDocNumV2(sheet, docNum); 
    if (!rowNum) return { found: false }; 
    return { 
      found: true, 
      email: sheet.getRange(rowNum, COLUMNS.EMAIL_PEMOHON_ADMIN3).getValue() || '', 
      nama: sheet.getRange(rowNum, COLUMNS.NAMA_PEMOHON).getValue() || 'Tidak Diketahui', 
      kontak: sheet.getRange(rowNum, COLUMNS.KONTAK_PEMOHON).getValue() || '' 
    }; 
  } catch (e) {
    Logger.log(`Error getPemohonContact: ${e.message}`);
    throw e;
  }
}

function submitFollowUp(data) { 
  try { 
    if (!data.documentNumber || !data.surveyor || !data.kontakPemohon || !data.startDate) {
      throw new Error("Data tidak lengkap.");
    }
    const respondenSheet = getSheet(SHEET_NAMES.RESPONDEN); 
    const rowToUpdate = findRowByDocNumV2(respondenSheet, data.documentNumber); 
    if (!rowToUpdate) throw new Error("Nomor dokumen tidak ditemukan."); 
    const startDate = parseDateFromForm(data.startDate); 
    if (!startDate) throw new Error("Tanggal mulai tidak valid.");
    setCellValue(respondenSheet.getRange(rowToUpdate, COLUMNS.NAMA_SURVEYOR_PILIHAN), data.surveyor); 
    setCellValue(respondenSheet.getRange(rowToUpdate, COLUMNS.KONTAK_PEMOHON), data.kontakPemohon); 
    setCellValue(respondenSheet.getRange(rowToUpdate, COLUMNS.TANGGAL_MULAI_ADMIN1), startDate, true); 
    const batasWaktu = new Date(startDate.getTime() + 14 * 86400000); 
    setCellValue(respondenSheet.getRange(rowToUpdate, COLUMNS.BATAS_WAKTU_SURVEYOR), batasWaktu, true); 
    return "✅ Data berhasil disimpan."; 
  } catch (e) { 
    Logger.log(`ERROR submitFollowUp: ${e.message}`); 
    throw new Error(`Terjadi kesalahan: ${e.message}`); 
  } 
}

function submitInitialAdmin2A(data) {
  try {
    if (!data.documentNumber || !data.tanggalMulai || !data.mappingOfficer) {
      throw new Error("Data tidak lengkap.");
    }
    const sheet = getSheet(SHEET_NAMES.RESPONDEN);
    const rowToUpdate = findRowByDocNumV2(sheet, data.documentNumber);
    if (!rowToUpdate) throw new Error("Nomor dokumen tidak ditemukan.");
    setCellValue(sheet.getRange(rowToUpdate, COLUMNS.STATUS_ADMIN_2A), "Proses");
    const tanggalMulaiObj = parseDateFromForm(data.tanggalMulai);
    if (tanggalMulaiObj) setCellValue(sheet.getRange(rowToUpdate, COLUMNS.TANGGAL_MULAI_ADMIN2A), tanggalMulaiObj, true);
    setCellValue(sheet.getRange(rowToUpdate, COLUMNS.PIC_MAPPING), data.mappingOfficer);
    return "✅ Proses awal berhasil disimpan.";
  } catch (e) {
    Logger.log(`ERROR submitInitialAdmin2A: ${e.message}`);
    throw new Error(`Terjadi kesalahan: ${e.message}`);
  }
}

function updateAdmin2AStatus(data) {
  try {
    if (!data.documentNumber || !data.newStatus) throw new Error("Data tidak lengkap.");
    const sheet = getSheet(SHEET_NAMES.RESPONDEN);
    const rowToUpdate = findRowByDocNumV2(sheet, data.documentNumber);
    if (!rowToUpdate) throw new Error("Nomor dokumen tidak ditemukan.");
    const newStatus = data.newStatus;
    setCellValue(sheet.getRange(rowToUpdate, COLUMNS.STATUS_ADMIN_2A), newStatus);
    let waMsgTemplate = "";
    let responseMessage = "";
    if (newStatus === "Selesai") {
      if (!data.tanggalSelesai) throw new Error("Tanggal Selesai wajib diisi.");
      const tanggalSelesaiObj = parseDateFromForm(data.tanggalSelesai);
      if (tanggalSelesaiObj) setCellValue(sheet.getRange(rowToUpdate, COLUMNS.TANGGAL_SELESAI_ADMIN2A), tanggalSelesaiObj, true);
      responseMessage = "✅ Berkas berhasil ditandai Selesai!";
      waMsgTemplate = `Selamat siang Bapak/Ibu *{nama_pemohon}*,\nAda kabar baik! Proses pemetaan untuk berkas (No. *${data.documentNumber}*) telah SELESAI.\nSaat ini, berkas Anda masuk tahap Quality Control (QC).\nTerima Kasih\nTeam Monitoring Berkas`;
    } else if (newStatus === "Ditunda") {
      if (!data.keteranganDitunda) throw new Error("Alasan Ditunda wajib diisi.");
      setCellValue(sheet.getRange(rowToUpdate, COLUMNS.KETERANGAN_DITUNDA), data.keteranganDitunda);
      responseMessage = "✅ Berkas berhasil ditandai Ditunda!";
      waMsgTemplate = `Selamat siang Bapak/Ibu *{nama_pemohon}*,\nBerkas (No. *${data.documentNumber}*) untuk sementara ditunda.\nAlasan: ${data.keteranganDitunda}\nSilakan koordinasi dengan petugas ukur dalam 30 hari, atau permohonan akan DIBATALKAN.\nTerima Kasih\nTeam Monitoring Berkas`;
    } else {
      throw new Error("Status tidak valid.");
    }
    const pemohonData = getPemohonContact(data.documentNumber);
    if (pemohonData.found && pemohonData.kontak) {
      const finalWaMsg = waMsgTemplate.replace('{nama_pemohon}', pemohonData.nama || 'Pemohon');
      const waData = prepareWhatsAppData(pemohonData.kontak, finalWaMsg);
      if (waData.success) {
        return { status: "success_with_wa", message: responseMessage + "<br>📱 Silakan lanjutkan pengiriman pesan WhatsApp.", url: waData.url };
      } else {
        responseMessage += "<br>⚠️ Gagal proses WA: " + waData.error;
      }
    }
    return { status: "success", message: responseMessage + "<br>⚠️ Notifikasi WhatsApp tidak dikirim (kontak pemohon tidak ditemukan)." };
  } catch (e) {
    Logger.log(`ERROR updateAdmin2AStatus: ${e.message}`);
    throw new Error(`Terjadi kesalahan: ${e.message}`);
  }
}

function submitAdmin2B_QC(data) { 
  try {
    if (!data.documentNumber || !data.status || !data.tanggalMulai) throw new Error("Data tidak lengkap.");
    const sheet = getSheet(SHEET_NAMES.RESPONDEN); 
    const rowToUpdate = findRowByDocNumV2(sheet, data.documentNumber); 
    if (!rowToUpdate) throw new Error("Nomor dokumen tidak ditemukan."); 
    setCellValue(sheet.getRange(rowToUpdate, COLUMNS.PIC_QC), data.status); 
    setCellValue(sheet.getRange(rowToUpdate, COLUMNS.TANGGAL_MULAI_ADMIN2B), parseDateFromForm(data.tanggalMulai), true); 
    return "✅ Proses awal QC berhasil disimpan."; 
  } catch (e) {
    Logger.log(`ERROR submitAdmin2B_QC: ${e.message}`);
    throw new Error(`Terjadi kesalahan: ${e.message}`);
  }
}

function updateAdmin2B_QC_Selesai(data) { 
  try {
    if (!data.documentNumber || !data.tanggalSelesai) throw new Error("Data tidak lengkap.");
    const sheet = getSheet(SHEET_NAMES.RESPONDEN); 
    const rowToUpdate = findRowByDocNumV2(sheet, data.documentNumber); 
    if (!rowToUpdate) throw new Error("Nomor dokumen tidak ditemukan."); 
    setCellValue(sheet.getRange(rowToUpdate, COLUMNS.PIC_QC), "Selesai"); 
    setCellValue(sheet.getRange(rowToUpdate, COLUMNS.TANGGAL_SELESAI_ADMIN2B), parseDateFromForm(data.tanggalSelesai), true); 
    return "✅ Berkas sudah ditandai Selesai QC!"; 
  } catch (e) {
    Logger.log(`ERROR updateAdmin2B_QC_Selesai: ${e.message}`);
    throw new Error(`Terjadi kesalahan: ${e.message}`);
  }
}

function submitAdmin3(formData) { 
  try {
    if (!formData.documentNumber || !formData.status || !formData.tanggalSelesai) {
      throw new Error("Data tidak lengkap.");
    }
    const sheet = getSheet(SHEET_NAMES.RESPONDEN); 
    const rowNum = findRowByDocNumV2(sheet, formData.documentNumber); 
    if (!rowNum) throw new Error("Dokumen tidak ditemukan."); 
    setCellValue(sheet.getRange(rowNum, COLUMNS.KOMENTAR_QC_ADMIN3), formData.status); 
    setCellValue(sheet.getRange(rowNum, COLUMNS.TANGGAL_SELESAI_ADMIN3), parseDateFromForm(formData.tanggalSelesai), true); 
    if (formData.emailPemohon) setCellValue(sheet.getRange(rowNum, COLUMNS.EMAIL_PEMOHON_ADMIN3), formData.emailPemohon); 
    let response = { status: "success", message: "✅ Data berhasil disimpan.", action: "display_message" }; 
    const updatedRowData = sheet.getRange(rowNum, 1, 1, sheet.getLastColumn()).getValues()[0]; 
    const procedure = updatedRowData[COLUMNS.PROSEDUR - 1] || 'N/A'; 
    const desa = updatedRowData[COLUMNS.DESA - 1] || 'N/A'; 
    const kecamatan = updatedRowData[COLUMNS.KECAMATAN - 1] || 'N/A'; 
    const surveyor = updatedRowData[COLUMNS.NAMA_SURVEYOR_PILIHAN - 1] || 'N/A'; 
    if (formData.sendWA) { 
      const waNumber = updatedRowData[COLUMNS.KONTAK_PEMOHON - 1]; 
      if (waNumber) { 
        const namaPemohon = updatedRowData[COLUMNS.NAMA_PEMOHON - 1] || 'N/A'; 
        const waMsg = `Yth. Bapak/Ibu ${namaPemohon},\n\nPermohonan *${procedure}* Anda (No. *${formData.documentNumber}*) telah selesai tahap Pemetaan dan QC, dinyatakan: *${formData.status}*.\nLokasi: Desa ${desa}, Kec. ${kecamatan}\nSurveyor: ${surveyor}\nTerima Kasih,\nBPN Kab. Serang`; 
        const waData = prepareWhatsAppData(waNumber, waMsg); 
        if (waData.success) { 
          response.action = "open_whatsapp"; 
          response.url = waData.url; 
          response.message += "<br>📱 Silakan lanjutkan pengiriman pesan WhatsApp."; 
        } else { 
          response.message += "<br>⚠️ Gagal proses WA: " + waData.error; 
        } 
      } else { 
        response.message += "<br>⚠️ Nomor WhatsApp tidak ditemukan."; 
      } 
    } 
    return response; 
  } catch (e) {
    Logger.log(`ERROR submitAdmin3: ${e.message}`);
    throw new Error(`Terjadi kesalahan: ${e.message}`);
  }
}

function submitAdminFinal(formData) { 
  try {
    if (!formData.documentNumber || !formData.finalStatus || !formData.date) {
      throw new Error("Data tidak lengkap.");
    }
    const sheet = getSheet(SHEET_NAMES.RESPONDEN); 
    const rowNum = findRowByDocNumV2(sheet, formData.documentNumber); 
    if (!rowNum) throw new Error("Nomor dokumen tidak ditemukan."); 
    setCellValue(sheet.getRange(rowNum, COLUMNS.STATUS_FINAL), formData.finalStatus); 
    setCellValue(sheet.getRange(rowNum, COLUMNS.TANGGAL_SELESAI_FINAL), parseDateFromForm(formData.date), true); 
    let response = { status: "success", message: "✅ Data final berhasil disimpan.", action: "display_message" }; 
    const updatedRowData = sheet.getRange(rowNum, 1, 1, sheet.getLastColumn()).getValues()[0]; 
    const nama = updatedRowData[COLUMNS.NAMA_PEMOHON - 1] || 'N/A'; 
    const waNumber = updatedRowData[COLUMNS.KONTAK_PEMOHON - 1]; 
    if (formData.sendWA && waNumber) { 
      const waMsg = `Yth. Bapak/Ibu ${nama},\n\nPermohonan (No. *${formData.documentNumber}*) telah selesai diproses, dinyatakan: *${formData.finalStatus}*.\nTerima Kasih,\nBPN Kab. Serang`; 
      const waData = prepareWhatsAppData(waNumber, waMsg); 
      if (waData.success) { 
        response.action = "open_whatsapp"; 
        response.url = waData.url; 
        response.message += "<br>📱 Silakan lanjutkan pengiriman pesan WhatsApp."; 
      } else { 
        response.message += "<br>⚠️ Gagal proses WA: " + waData.error; 
      } 
    } 
    return response; 
  } catch (e) {
    Logger.log(`ERROR submitAdminFinal: ${e.message}`);
    throw new Error(`Terjadi kesalahan: ${e.message}`);
  }
}

function sendNotificationToSurveyor(docNumber) { 
  try { 
    if (!docNumber || typeof docNumber !== 'string') throw new Error("Nomor dokumen tidak valid.");
    const sheet = getSheet(SHEET_NAMES.RESPONDEN); 
    const rowNum = findRowByDocNumV2(sheet, docNumber); 
    if (!rowNum) throw new Error("Nomor dokumen tidak ditemukan."); 
    const rowData = sheet.getRange(rowNum, 1, 1, sheet.getLastColumn()).getValues()[0]; 
    const surveyor = rowData[COLUMNS.NAMA_SURVEYOR_PILIHAN - 1] || "Tidak Diketahui"; 
    const docNum = rowData[COLUMNS.NOMOR_BERKAS - 1] || "Tidak Diketahui"; 
    const contact = getSurveyorContact(surveyor); 
    if (!contact) throw new Error("Kontak surveyor tidak ditemukan."); 
    const message = `Halo, Sobat Ukur ${surveyor}!\nAnda mendapat tugas untuk berkas ${docNum}. Silakan ambil surat tugas di Seksi Pemetaan dan Survey, BPN Kab. Serang.\nTerima Kasih,\nAdmin 1`; 
    const waData = prepareWhatsAppData(contact, message); 
    if (waData.success) { 
      return { success: true, action: "open_whatsapp", url: waData.url, message: "✅ Notifikasi ke surveyor berhasil disiapkan." }; 
    } 
    throw new Error(waData.error); 
  } catch (e) { 
    Logger.log(`Error sendNotificationToSurveyor: ${e.message}`); 
    return { success: false, message: `❌ Gagal mengirim notifikasi: ${e.message}` }; 
  } 
}

function sendNotificationToApplicant(docNumber, sendEmail = false) {
  try {
    if (!docNumber || typeof docNumber !== 'string') throw new Error("Nomor dokumen tidak valid.");
    const sheet = getSheet(SHEET_NAMES.RESPONDEN); 
    const rowNum = findRowByDocNumV2(sheet, docNumber); 
    if (!rowNum) throw new Error("Nomor dokumen tidak ditemukan.");
    const rowData = sheet.getRange(rowNum, 1, 1, sheet.getLastColumn()).getValues()[0]; 
    const namaPemohon = rowData[COLUMNS.NAMA_PEMOHON - 1] || "Tidak Diketahui"; 
    const contact = rowData[COLUMNS.KONTAK_PEMOHON - 1]; 
    if (!contact) throw new Error("Kontak pemohon tidak ditemukan.");
    const message = `Halo, Bapak/Ibu ${namaPemohon}! Berkas Anda (${docNumber}) telah ditugaskan ke surveyor. Silakan koordinasi untuk proses selanjutnya.\nTerima Kasih,\nAdmin 1`;
    const waData = prepareWhatsAppData(contact, message); 
    let success = false;
    let url = null;
    if (waData.success) {
      success = true;
      url = waData.url;
    } else if (sendEmail && rowData[COLUMNS.EMAIL_PEMOHON_ADMIN3 - 1]) {
      const email = rowData[COLUMNS.EMAIL_PEMOHON_ADMIN3 - 1];
      MailApp.sendEmail(email, 'Notif Berkas BPN', message);
      success = true;
    }
    if (success) {
      return { success: true, action: "open_whatsapp", url: url, message: url ? "✅ WA siap dikirim." : "✅ Email dikirim." };
    }
    throw new Error(waData.error);
  } catch (e) { 
    Logger.log(`Error sendToApplicant: ${e.message}`); 
    return { success: false, message: `❌ Gagal: ${e.message}` }; 
  } 
}

function getDashboardData() { 
  try { 
    const sheet = getSheet(SHEET_NAMES.RESPONDEN); 
    const range = sheet.getRange(2, 1, sheet.getLastRow() - 1, sheet.getLastColumn()); 
    const data = range.getValues(); 
    const stats = { totalBerkas: 0, pendingAdmin1: 0, pendingAdmin2A: 0, pendingAdmin2B: 0, pendingAdmin3: 0, disetujui: 0, dibatalkan: 0 }; 
    const performanceScores = { admin2A: { ONTIME: 0, LATE: 0 }, admin3: { ONTIME: 0, LATE: 0 }, admin4: { ONTIME: 0, LATE: 0 } }; 
    const surveyorScores = {}; 
    const mappingScores = {}; 
    data.forEach(row => { 
      if (!row[COLUMNS.TIMESTAMP - 1]) return; 
      stats.totalBerkas++; 
      if (row[COLUMNS.TANGGAL_MULAI_ADMIN1 - 1] && !row[COLUMNS.TANGGAL_SELESAI_ADMIN1 - 1]) stats.pendingAdmin1++; 
      if (row[COLUMNS.TANGGAL_SELESAI_ADMIN1 - 1] && !row[COLUMNS.TANGGAL_SELESAI_ADMIN2A - 1]) stats.pendingAdmin2A++; 
      if (row[COLUMNS.TANGGAL_SELESAI_ADMIN2A - 1] && !row[COLUMNS.TANGGAL_SELESAI_ADMIN2B - 1]) stats.pendingAdmin2B++; 
      if (row[COLUMNS.TANGGAL_SELESAI_ADMIN2B - 1] && !row[COLUMNS.TANGGAL_SELESAI_ADMIN3 - 1]) stats.pendingAdmin3++; 
      const statusFinal = row[COLUMNS.STATUS_FINAL - 1]; 
      if (statusFinal === "Disetujui Permohonan") stats.disetujui++; 
      if (statusFinal === "Dibatalkan Permohonan") stats.dibatalkan++; 
      const statusAdmin2A = row[COLUMNS.STATUS_MAPPING_ONTIME_LATE - 1]; 
      if (statusAdmin2A && statusAdmin2A.toString().toUpperCase() === 'ONTIME') performanceScores.admin2A.ONTIME++; 
      else if (statusAdmin2A && statusAdmin2A.toString().toUpperCase() === 'LATE') performanceScores.admin2A.LATE++; 
      const statusAdmin3 = row[COLUMNS.STATUS_ADMIN3_ONTIME_LATE - 1]; 
      if (statusAdmin3 && statusAdmin3.toString().toUpperCase() === 'ONTIME') performanceScores.admin3.ONTIME++; 
      else if (statusAdmin3 && statusAdmin3.toString().toUpperCase() === 'LATE') performanceScores.admin3.LATE++; 
      const statusAdmin4 = row[COLUMNS.STATUS_ADMIN4_ONTIME_LATE - 1]; 
      if (statusAdmin4 && statusAdmin4.toString().toUpperCase() === 'ONTIME') performanceScores.admin4.ONTIME++; 
      else if (statusAdmin4 && statusAdmin4.toString().toUpperCase() === 'LATE') performanceScores.admin4.LATE++; 
      const surveyorName = row[COLUMNS.NAMA_SURVEYOR_PILIHAN - 1]; 
      const surveyorStatus = row[COLUMNS.STATUS_SURVEYOR_ONTIME_LATE - 1]; 
      if (surveyorName && surveyorStatus && typeof surveyorName === 'string' && !/[-\u001F]/.test(surveyorName)) { 
        if (!surveyorScores[surveyorName]) surveyorScores[surveyorName] = { ontime: 0, late: 0 }; 
        if (surveyorStatus.toString().toUpperCase() === 'ONTIME') surveyorScores[surveyorName].ontime++; 
        if (surveyorStatus.toString().toUpperCase() === 'LATE') surveyorScores[surveyorName].late++; 
      } 
      const mappingName = row[COLUMNS.PIC_MAPPING - 1]; 
      const mappingStatus = row[COLUMNS.STATUS_MAPPING_ONTIME_LATE - 1]; 
      if (mappingName && mappingStatus && typeof mappingName === 'string' && !/[-\u001F]/.test(mappingName)) { 
        if (!mappingScores[mappingName]) mappingScores[mappingName] = { ontime: 0, late: 0 }; 
        if (mappingStatus.toString().toUpperCase() === 'ONTIME') mappingScores[mappingName].ontime++; 
      } 
    }); 
    const surveyorArray = Object.entries(surveyorScores).map(([name, scores]) => ({ name, ...scores })); 
    const mappingArray = Object.entries(mappingScores).map(([name, scores]) => ({ name, ...scores })); 
    const result = { 
      stats, 
      performance: performanceScores, 
      individualPerformance: { 
        surveyorTopOntime: surveyorArray.sort((a, b) => b.ontime - a.ontime).slice(0, 2), 
        surveyorTopLate: surveyorArray.sort((a, b) => b.late - a.late).slice(0, 2), 
        mappingTopOntime: mappingArray.sort((a, b) => b.ontime - a.ontime).slice(0, 1) 
      } 
    }; 
    return JSON.parse(JSON.stringify(result)); // Pastikan JSON bersih
  } catch (e) { 
    Logger.log(`Error getDashboardData: ${e.message}`); 
    return { stats: {}, performance: {}, individualPerformance: {} }; 
  } 
}

function sendEmailToSurveyor(docNumber) {
  try {
    if (!docNumber || typeof docNumber !== 'string') throw new Error("Nomor dokumen tidak valid.");
    const sheet = getSheet(SHEET_NAMES.RESPONDEN); 
    const rowNum = findRowByDocNumV2(sheet, docNumber); 
    if (!rowNum) throw new Error("Nomor dokumen tidak ditemukan.");
    const rowData = sheet.getRange(rowNum, 1, 1, sheet.getLastColumn()).getValues()[0]; 
    const surveyor = rowData[COLUMNS.NAMA_SURVEYOR_PILIHAN - 1] || "Tidak Diketahui"; 
    const docNum = rowData[COLUMNS.NOMOR_BERKAS - 1] || "Tidak Diketahui"; 
    const procedure = rowData[COLUMNS.PROSEDUR - 1] || "N/A";  // Added
    const desa = rowData[COLUMNS.DESA - 1] || "N/A";  // Added
    const kecamatan = rowData[COLUMNS.KECAMATAN - 1] || "N/A";  // Added
    const namaPemohon = rowData[COLUMNS.NAMA_PEMOHON - 1] || "Tidak Diketahui";  // Added
    const kontakPemohon = rowData[COLUMNS.KONTAK_PEMOHON - 1] || "Tidak Diketahui";  // Added
    const tanggalMulaiStr = Utilities.formatDate(new Date(rowData[COLUMNS.TANGGAL_MULAI_ADMIN1 - 1]), TIME_ZONE, "dd/MM/yyyy") || "N/A";  // Added
    const batasWaktu = rowData[COLUMNS.BATAS_WAKTU_SURVEYOR - 1] ? Utilities.formatDate(new Date(rowData[COLUMNS.BATAS_WAKTU_SURVEYOR - 1]), TIME_ZONE, "dd/MM/yyyy") : "N/A";  // Added
    const listSheet = getSheet(SHEET_NAMES.LIST); 
    const surveyorList = listSheet.getRange("G2:G29").getValues().flat(); 
    const emailList = listSheet.getRange("H2:H29").getValues().flat(); 
    const emailIndex = surveyorList.findIndex(name => name && name.trim().toLowerCase() === surveyor.trim().toLowerCase()); 
    if (emailIndex === -1 || !emailList[emailIndex]) throw new Error("Email surveyor tidak ditemukan.");
    const email = emailList[emailIndex];
    Logger.log(`Email surveyor: ${email}`);  // Debug
    const subject = `📄 Surat Tugas Pengukuran untuk ${surveyor}`;
    const body = `
Hi, Sobat Ukur, <b>${surveyor}</b><br>
Di BPN Kabupaten Serang<br><br>

Selamat pagi para pemburu batas,<br><br>
Anda telah terpilih untuk menjalankan tugas pengukuran, berikut rinciannya:<br><br>

• <b>Nomor Dokumen</b>: ${docNum}<br>
• <b>Prosedur</b>: ${procedure}<br>
• <b>Lokasi</b>: Desa ${desa}, Kecamatan ${kecamatan}<br>
• <b>Nama Pemohon</b>: ${namaPemohon}<br>
• <b>Kontak Pemohon</b>: ${kontakPemohon}<br>
• <b>Tanggal Mulai</b>: ${tanggalMulaiStr}<br>
• <b>Batas Waktu</b>: ${batasWaktu} (14 hari)<br><br>

<b>Petunjuk:</b><br>
1. <b>Segera hubungi pemohon untuk koordinasi</b><br>
2. <b>Surat tugas dilampirkan</b><br><br>

Hormat kami,<br>
<b>Seksi Survei dan Pemetaan</b><br>
<b>BPN Kabupaten Serang</b>
    `;
    MailApp.sendEmail(email, subject, body.replace(/<br>/g, '\n').replace(/<b>(.*?)<\/b>/g, '$1'), { htmlBody: body });
    return { success: true, message: "✅ Email dikirim ke surveyor." }; 
  } catch (e) { 
    Logger.log(`Error sendEmailToSurveyor: ${e.message}`); 
    return { success: false, message: `❌ Gagal: ${e.message}` }; 
  } 
}

function getSurveyorData(surveyorName) {
  try {
    if (!surveyorName || typeof surveyorName !== 'string' || /[-\u001F]/.test(surveyorName)) {
      throw new Error("Nama surveyor tidak valid.");
    }
    const cacheKey = `surveyorData_${surveyorName}`;
    let cachedData = scriptCache.get(cacheKey);
    if (cachedData) return JSON.parse(cachedData);

    const sheet = getSheet(SHEET_NAMES.RESPONDEN);
    const range = sheet.getRange(1, COLUMNS.NAMA_SURVEYOR_PILIHAN, sheet.getLastRow());
    const textFinder = range.createTextFinder(surveyorName).matchEntireCell(true);
    const foundRows = [];
    let cell = textFinder.findNext();
    while (cell) { foundRows.push(cell.getRow()); cell = textFinder.findNext(); }

    const result = {
      stats: { total: 0, ontime: 0, late: 0 },
      workload: {
        surveyor: { count: 0, docs: [] }, pemetaan: { count: 0, docs: [] },
        qc: { count: 0, docs: [] }, verifikasi: { count: 0, docs: [] },
        finalisasi: { count: 0, docs: [] }, selesai: { count: 0, docs: [] },
      },
      lastUpdate: Utilities.formatDate(new Date(), TIME_ZONE, "HH:mm dd/MM/yyyy")
    };

    foundRows.forEach(rowNum => {
      const row = sheet.getRange(rowNum, 1, 1, sheet.getLastColumn()).getValues()[0];
      const docNum = row[COLUMNS.NOMOR_BERKAS - 1] || 'N/A';
      if (typeof docNum !== 'string' || /[-\u001F]/.test(docNum)) return;

      result.stats.total++;
      const performance = row[COLUMNS.STATUS_SURVEYOR_ONTIME_LATE - 1];
      if (performance === 'ONTIME') result.stats.ontime++;
      if (performance === 'LATE') result.stats.late++;

      const docData = {
        nomorBerkas: typeof docNum === 'string' && docNum.includes('/') ? docNum.split('/').slice(1).join('/') : docNum,
        prosedur: row[COLUMNS.PROSEDUR - 1] || 'N/A',
        desa: row[COLUMNS.DESA - 1] || 'N/A',
        kecamatan: row[COLUMNS.KECAMATAN - 1] || 'N/A',
        namaPemohon: row[COLUMNS.NAMA_PEMOHON - 1] || 'N/A',
        tanggalMulai: row[COLUMNS.TANGGAL_MULAI_ADMIN1 - 1] ? Utilities.formatDate(new Date(row[COLUMNS.TANGGAL_MULAI_ADMIN1 - 1]), TIME_ZONE, 'dd/MM/yyyy') : '',
        batasWaktu: row[COLUMNS.BATAS_WAKTU_SURVEYOR - 1] ? Utilities.formatDate(new Date(row[COLUMNS.BATAS_WAKTU_SURVEYOR - 1]), TIME_ZONE, 'dd/MM/yyyy') : ''
      };

      if (row[COLUMNS.TANGGAL_SELESAI_FINAL - 1]) {
        result.workload.selesai.count++;
        result.workload.selesai.docs.push(docData);
      } else if (row[COLUMNS.TANGGAL_SELESAI_ADMIN3 - 1]) {
        result.workload.finalisasi.count++;
        result.workload.finalisasi.docs.push(docData);
      } else if (row[COLUMNS.TANGGAL_SELESAI_ADMIN2B - 1]) {
        result.workload.verifikasi.count++;
        result.workload.verifikasi.docs.push(docData);
      } else if (row[COLUMNS.TANGGAL_SELESAI_ADMIN2A - 1]) {
        result.workload.qc.count++;
        result.workload.qc.docs.push(docData);
      } else if (row[COLUMNS.TANGGAL_SELESAI_ADMIN1 - 1]) {
        result.workload.pemetaan.count++;
        result.workload.pemetaan.docs.push(docData);
      } else if (row[COLUMNS.TANGGAL_MULAI_ADMIN1 - 1]) {
        result.workload.surveyor.count++;
        result.workload.surveyor.docs.push(docData);
      }
    });

    scriptCache.put(cacheKey, JSON.stringify(result), 7200);
    return result;
  } catch (e) {
    Logger.log(`Error getSurveyorData: ${e.message}`);
    clearCacheOnError();
    throw new Error(`Terjadi kesalahan: ${e.message}`);
  }
}

function getKecamatanStats() {
  try {
    const sheet = getSheet(SHEET_NAMES.RESPONDEN);
    const range = sheet.getRange(2, COLUMNS.KECAMATAN, sheet.getLastRow() - 1, 1);
    const kecamatanData = range.getValues().flat()
      .filter(kec => kec && typeof kec === 'string' && kec.trim() && !/[-\u001F]/.test(kec));
    if (kecamatanData.length === 0) return [{ kec: "Tidak Ada Data", count: 0 }]; // Fallback
    const kecamatanCounts = {};
    kecamatanData.forEach(kec => {
      kec = kec.trim();
      kecamatanCounts[kec] = (kecamatanCounts[kec] || 0) + 1;
    });
    const kecamatanArray = Object.entries(kecamatanCounts).map(([kec, count]) => ({ kec, count }))
      .sort((a, b) => b.count - a.count);
    return kecamatanArray.length > 0 ? kecamatanArray.slice(0, 5) : [{ kec: "Tidak Ada Data", count: 0 }]; // Top 5
  } catch (e) {
    Logger.log(`Error getKecamatanStats: ${e.message}`);
    clearCacheOnError();
    return [{ kec: "Tidak Ada Data", count: 0 }]; // Fallback
  }
}

